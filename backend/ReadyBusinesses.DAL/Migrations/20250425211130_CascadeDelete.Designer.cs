// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadyBusinesses.DLL.Context;

#nullable disable

namespace ReadyBusinesses.DLL.Migrations
{
    [DbContext(typeof(BusinessesContext))]
    [Migration("20250425211130_CascadeDelete")]
    partial class CascadeDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GlobalCriteriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMaximized")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasPrecision(18, 4)
                        .HasColumnType("float(18)");

                    b.HasKey("Id");

                    b.HasIndex("GlobalCriteriaId");

                    b.ToTable("Criteria");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.GlobalCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("GlobalCriteria");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AverageChequePrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("AverageProfitPerMonth")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("AverageRevenuePerMonth")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("BusinessStatus")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployersCount")
                        .HasColumnType("int");

                    b.Property<decimal>("EmployersSalaryPerMonth")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("HasBargaining")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCompetitors")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEquipment")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGeneratorOrEcoFlow")
                        .HasColumnType("bit");

                    b.Property<bool>("HasIntegrationWithDeliveryServices")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPhop")
                        .HasColumnType("bit");

                    b.Property<bool>("HasShelter")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSupportFromPreviousOwner")
                        .HasColumnType("bit");

                    b.Property<int>("InvestmentScore")
                        .HasColumnType("int");

                    b.Property<bool>("IsSeasonal")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceInUah")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<double>("RoomArea")
                        .HasPrecision(18, 4)
                        .HasColumnType("float(18)");

                    b.Property<decimal?>("RoomRent")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("Season")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.PostInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<int>("ViewTimeInMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostsInfos");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.PostPicture", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId", "PictureId");

                    b.HasIndex("PictureId");

                    b.ToTable("PostPictures");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.PostRecommendation", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecommendationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId", "RecommendationId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("PostRecommendation");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.PostSocialMedia", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocialMediaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId", "SocialMediaId");

                    b.HasIndex("SocialMediaId");

                    b.ToTable("PostsSocialMedias");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.Recommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AdaptationScore")
                        .HasPrecision(18, 4)
                        .HasColumnType("float(18)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriteriaMatrix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriteriaWeights")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FinancialScore")
                        .HasPrecision(18, 4)
                        .HasColumnType("float(18)");

                    b.Property<Guid?>("GivenById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LocationScore")
                        .HasPrecision(18, 4)
                        .HasColumnType("float(18)");

                    b.Property<string>("Minuses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pluses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PopularityScore")
                        .HasPrecision(18, 4)
                        .HasColumnType("float(18)");

                    b.Property<double>("RatingScore")
                        .HasPrecision(18, 4)
                        .HasColumnType("float(18)");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShiScore")
                        .HasPrecision(18, 4)
                        .HasColumnType("float(18)");

                    b.Property<double>("SupportScore")
                        .HasPrecision(18, 4)
                        .HasColumnType("float(18)");

                    b.Property<double>("TeamScore")
                        .HasPrecision(18, 4)
                        .HasColumnType("float(18)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GivenById");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.SavedPosts", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("SavedPosts");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpert")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfileAvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProfileAvatarId")
                        .IsUnique()
                        .HasFilter("[ProfileAvatarId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.UserSocialMedia", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocialMediaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SocialMediaId");

                    b.HasIndex("SocialMediaId");

                    b.ToTable("UserSocialMedias");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.ViewedPosts", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("ViewedPosts");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.Criteria", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.GlobalCriteria", "GlobalCriteria")
                        .WithMany("Criteria")
                        .HasForeignKey("GlobalCriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalCriteria");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.Post", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.User", "CreatedByUser")
                        .WithMany("Posts")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.PostInfo", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadyBusinesses.Common.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.PostPicture", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ReadyBusinesses.Common.Entities.Post", "Post")
                        .WithMany("Pictures")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Picture");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.PostRecommendation", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.Post", "Post")
                        .WithMany("Recommendations")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ReadyBusinesses.Common.Entities.Recommendation", "Recommendation")
                        .WithMany()
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.PostSocialMedia", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.Post", "Post")
                        .WithMany("SocialMedias")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadyBusinesses.Common.Entities.SocialMedia", "SocialMedia")
                        .WithMany()
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("SocialMedia");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.Recommendation", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.User", "GivenBy")
                        .WithMany()
                        .HasForeignKey("GivenById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("GivenBy");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.RefreshToken", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("ReadyBusinesses.Common.Entities.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.SavedPosts", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ReadyBusinesses.Common.Entities.User", "User")
                        .WithMany("SavedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.User", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.Picture", "ProfileAvatar")
                        .WithOne()
                        .HasForeignKey("ReadyBusinesses.Common.Entities.User", "ProfileAvatarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProfileAvatar");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.UserSocialMedia", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.SocialMedia", "SocialMedia")
                        .WithMany()
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadyBusinesses.Common.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMedia");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.ViewedPosts", b =>
                {
                    b.HasOne("ReadyBusinesses.Common.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ReadyBusinesses.Common.Entities.User", "User")
                        .WithMany("ViewedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.GlobalCriteria", b =>
                {
                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.Post", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("Recommendations");

                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("ReadyBusinesses.Common.Entities.User", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("SavedPosts");

                    b.Navigation("ViewedPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
